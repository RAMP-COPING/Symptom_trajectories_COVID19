x.title <- 12
y.title <- 26
x.text <-  24
y.text <- 24
axis.text <-  24
strip.title <- 36
strip.text <- 28
legend.title <- 40
legend.text <-22
legend.size <-6
legend.key.size <- 5
caption <- 30
figure.w <- 8
figure.l <- 11
res <- 700
units = 'in'
label.size <- 32
elephant <-  ggplot(fc_plot,
aes(trial_by_stimulus,Mean,
color=normalised_stimulus))         +
geom_point(size=2)                                        +
geom_line(size =1)                                        +
geom_ribbon(aes(ymin=ci_low, ymax=ci_high,
fill=normalised_stimulus),
linetype=2, alpha=0.1,
size=.8)                                      +
scale_fill_manual( values=c(PMpallette))                   +
facet_grid(. ~ phase, scales = "free_x",
space = "free_x")              +
theme_bw()                                                +
scale_color_manual("Stimuli",values=PMpallette)                     +
labs(title="PORT elephant plot",
y="Mean expectancy rating\n",
subtitle = "dashed lines = 95% confidence intervals\n")                                   +
theme(plot.subtitle = element_text(face = "italic",
size = 18),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(face = "bold",
size = axis.text),
strip.text = element_text(face = "bold",
size = strip.text),
legend.key = element_rect(size = legend.size),
legend.key.size = unit(legend.key.size, 'lines'),
legend.text = element_text(size = legend.text),
legend.title = element_text(face = "bold",
size = legend.title),
legend.position = 'none',
axis.title = element_text(face = "bold",
size = y.title),
panel.spacing.x=unit(0, "lines"))                     +
scale_x_continuous(breaks = round(seq(min(fc_plot$trial_by_stimulus),
max(fc_plot$trial_by_stimulus), by = 1),1))          +
theme(plot.margin = unit(c(0.6, 0.6, 0.6, 0.6), "cm"))
# save figure in folder
png(paste0(path,"/PORT_elephtanPlot.png"),width=18,height=10,unit=units,res=res)
ggdraw(elephant)
dev.off()
elephant <-  ggplot(fc_plot,
aes(trial_by_stimulus,Mean,
color=normalised_stimulus))         +
geom_point(size=2)                                        +
geom_line(size =1)                                        +
geom_ribbon(aes(ymin=ci_low, ymax=ci_high,
fill=normalised_stimulus),
linetype=2, alpha=0.1,
size=.8)                                      +
scale_fill_manual( values=c(PMpallette))                   +
facet_grid(. ~ phase, scales = "free_x",
space = "free_x")              +
theme_bw()                                                +
scale_color_manual("Stimuli",values=PMpallette)                     +
labs(title="PORT elephant plot",
y="Mean expectancy rating\n",
subtitle = "dashed lines = 95% confidence intervals\n")                                   +
theme(plot.subtitle = element_text(face = "italic",
size = 18),
plot.subtitle = element_text(face = "italic",
size = 38),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(face = "bold",
size = axis.text),
strip.text = element_text(face = "bold",
size = strip.text),
legend.key = element_rect(size = legend.size),
legend.key.size = unit(legend.key.size, 'lines'),
legend.text = element_text(size = legend.text),
legend.title = element_text(face = "bold",
size = legend.title),
legend.position = 'none',
axis.title = element_text(face = "bold",
size = y.title),
panel.spacing.x=unit(0, "lines"))                     +
scale_x_continuous(breaks = round(seq(min(fc_plot$trial_by_stimulus),
max(fc_plot$trial_by_stimulus), by = 1),1))          +
theme(plot.margin = unit(c(0.6, 0.6, 0.6, 0.6), "cm"))
# save figure in folder
png(paste0(path,"/PORT_elephtanPlot.png"),width=18,height=10,unit=units,res=res)
ggdraw(elephant)
dev.off()
elephant <-  ggplot(fc_plot,
aes(trial_by_stimulus,Mean,
color=normalised_stimulus))         +
geom_point(size=2)                                        +
geom_line(size =1)                                        +
geom_ribbon(aes(ymin=ci_low, ymax=ci_high,
fill=normalised_stimulus),
linetype=2, alpha=0.1,
size=.8)                                      +
scale_fill_manual( values=c(PMpallette))                   +
facet_grid(. ~ phase, scales = "free_x",
space = "free_x")              +
theme_bw()                                                +
scale_color_manual("Stimuli",values=PMpallette)                     +
labs(title="PORT elephant plot",
y="Mean expectancy rating\n",
subtitle = "dashed lines = 95% confidence intervals\n")                                   +
theme(plot.subtitle = element_text(face = "italic",
size = 18),
plot.title = element_text(face = "italic",
size = 38),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(face = "bold",
size = axis.text),
strip.text = element_text(face = "bold",
size = strip.text),
legend.key = element_rect(size = legend.size),
legend.key.size = unit(legend.key.size, 'lines'),
legend.text = element_text(size = legend.text),
legend.title = element_text(face = "bold",
size = legend.title),
legend.position = 'none',
axis.title = element_text(face = "bold",
size = y.title),
panel.spacing.x=unit(0, "lines"))                     +
scale_x_continuous(breaks = round(seq(min(fc_plot$trial_by_stimulus),
max(fc_plot$trial_by_stimulus), by = 1),1))          +
theme(plot.margin = unit(c(0.6, 0.6, 0.6, 0.6), "cm"))
# save figure in folder
png(paste0(path,"/PORT_elephtanPlot.png"),width=18,height=10,unit=units,res=res)
ggdraw(elephant)
dev.off()
elephant <-  ggplot(fc_plot,
aes(trial_by_stimulus,Mean,
color=normalised_stimulus))         +
geom_point(size=2)                                        +
geom_line(size =1)                                        +
geom_ribbon(aes(ymin=ci_low, ymax=ci_high,
fill=normalised_stimulus),
linetype=2, alpha=0.1,
size=.8)                                      +
scale_fill_manual( values=c(PMpallette))                   +
facet_grid(. ~ phase, scales = "free_x",
space = "free_x")              +
theme_bw()                                                +
scale_color_manual("Stimuli",values=PMpallette)                     +
labs(title="PORT elephant plot",
y="Mean expectancy rating\n",
subtitle = "dashed lines = 95% confidence intervals\n")                                   +
theme(plot.subtitle = element_text(face = "italic",
size = 18),
plot.title = element_text(face = "italic",
size = 38),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(face = "bold",
size = axis.text),
strip.text = element_text(face = "bold",
size = strip.text),
legend.key = element_rect(size = legend.size),
legend.key.size = unit(legend.key.size, 'lines'),
legend.text = element_text(size = legend.text),
legend.title = element_text(face = "bold",
size = legend.title),
legend.position = 'none',
axis.title = element_text(face = "bold",
size = y.title),
panel.spacing.x=unit(0, "lines"))                     +
scale_x_continuous(breaks = round(seq(min(fc_plot$trial_by_stimulus),
max(fc_plot$trial_by_stimulus), by = 1),1))          +
scale_y_continuous(breaks = seq(0,10,by=1))         +
theme(plot.margin = unit(c(0.6, 0.6, 0.6, 0.6), "cm"))
# save figure in folder
png(paste0(path,"/PORT_elephantPlot.png"),width=18,height=10,unit=units,res=res)
ggdraw(elephant)
dev.off()
## install libraries the first time, call from library subsequent times
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr")
library(tidyr)
}
if(!require(data.table)){
install.packages("data.table")
library(data.table)
}
if(!require(gtools)){
install.packages("gtools")
library(gtools)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(cowplot)){
install.packages("cowplot")
library(cowplot)
}
## file picker: get the post experiment questionnaire
filename <- file.choose()
## read it in
dat <- fread(filename)
## get the path to the directory where the post experiment questionnaire is hosted.
path <- dirname(filename)
# Post experiment filtering ####
## filter the data so only people who followed experiment instructions fully (or did remove headphones, but only at a point it didnt matter) remain
##MD update: Changed to case_when so we can also record which participants were *not* eligible (sends them an automated "your ineligible" email in this case)
participant_list <- dat %>%
mutate(app_completed_eligible =
case_when(
#1) Eligibility = 1 if all the below are true...
experiment_unpleasant_rating > 5 &
did_follow_instructions == TRUE &
did_pay_attention == TRUE &
did_remove_headphones == TRUE &
#and any of the headphone removal point answers are selected (part of the
(headphones_removal_point == "Never during any timed trials" |
headphones_removal_point == "During timed trials, because I hadn't heard anything for a long time" |
headphones_removal_point == "During timed trials, after I had heard a few loud noises") ~ 1,
#2) Eligibility = 1 if all the below are true:
experiment_unpleasant_rating > 5 &
did_follow_instructions == TRUE &
did_pay_attention == TRUE &
did_remove_headphones == FALSE ~ 1,
#3) Eligibility = 0 if (any of the following):
experiment_unpleasant_rating <= 5 ~ 0,
did_follow_instructions == FALSE |
did_pay_attention == FALSE ~ 0,
##Update the below so that it's == "the value that makes you ineligile" (MD not sure what that would be...)
did_remove_headphones == TRUE & (headphones_removal_point != "Never during any timed trials" &
headphones_removal_point != "During timed trials, because I hadn't heard anything for a long time" &
headphones_removal_point != "During timed trials, after I had heard a few loud noises") ~ 0)) %>%
rename("port_id" = "participant_id")
## get a list of IDS from these accurate completers
###MD update: text below no longer necessary
#participant_list <- as.data.frame(complete$participant_id)
#names(participant_list) <- "port_id"
#participant_list$app_completed_eligible <- "Yes"
#Add in the other columns required for the REDCap data import
participant_list$redcap_event_name <- "flare_app_port_4_arm_1"
participant_list$flare_complete <- 1    #MD: Assuming that this list will only include participants that have completed the app? (regardless of eligibility)
participant_list$flare_app_complete <- 2
# select variables reorder for redcap
participant_list <- participant_list %>%
select(port_id,redcap_event_name,flare_complete,app_completed_eligible)
## save this list.
write.csv(participant_list,paste0(path,"/iESO_eligible_participant_ID.csv"),
row.names = FALSE)
# task behaviour data for possible exclusions ####
# read in fear conditioning data.
## Get the prefix for the filenames from the path
fc_prefix <- basename(path)
## read in fear conditioning data
fc_dat <- fread(paste0(path,"/",fc_prefix,"-fear-conditioning-data.csv"))
## df with average volume per phase
fc_avvol <- fc_dat %>%
group_by(participant_id,phase) %>%
summarise(average_volume = mean(volume_level)) %>%
spread(phase, average_volume) %>%
rename_with(~paste0("AverageVolume_",.),acquisition:extinction) %>%
select(participant_id,AverageVolume_acquisition)
## df with n missing trials per phase
fc_missdat <- fc_dat %>%
group_by(participant_id,phase) %>%
summarise(missing_trials = sum(is.na(rating))) %>%
spread(phase, missing_trials) %>%
rename_with(~paste0("MissingData_",.),acquisition:extinction)
## df with number of trial exits during a phase
fc_exit <- fc_dat %>%
group_by(participant_id,phase) %>%
summarise(exit_trials = sum(did_leave_trial == TRUE)) %>%
spread(phase, exit_trials) %>%
rename_with(~paste0("TrialExit_",.),acquisition:extinction)
## df with number of headphone unplugged trials
fc_headphones <- fc_dat %>%
group_by(participant_id,phase) %>%
summarise(headphone_out = sum(headphones == FALSE)) %>%
spread(phase, headphone_out) %>%
rename_with(~paste0("headphones.out_",.),acquisition:extinction)
## merge all the possible reasons for exclusion
fc_ex <- full_join(fc_avvol,fc_exit)
fc_ex <- full_join(fc_ex,fc_missdat)
fc_ex <- full_join(fc_ex,fc_headphones)
## save this list.
write.csv(fc_ex,paste0(path,"/additional_app_checks.csv"),
row.names = FALSE)
# ELEPHANT PLOT ####
## make long summarised plot version
fc_plot <- fc_dat %>%
group_by(phase,normalised_stimulus,trial_by_stimulus) %>%
summarise(Mean = mean(rating,na.rm = TRUE),
SD = sd(rating, na.rm = TRUE),
N = n()) %>%
mutate(SE = SD/sqrt(N),
ci_low = Mean - qt(1-(0.05/2),N-1) * SE,
ci_high = Mean + qt(1-(0.05/2),N-1) * SE)
## colour palette ####
PMpallette <- c("#002D64","#ACB9EA")
### SET UP TEXT SIZE HERE ########
y.title <- 26
axis.text <-  24
strip.text <- 28
# png resolution and units
res <- 700
units = 'in'
# plot
elephant <-  ggplot(fc_plot,
aes(trial_by_stimulus,Mean,
color=normalised_stimulus))         +
geom_point(size=2)                                        +
geom_line(size =1)                                        +
geom_ribbon(aes(ymin=ci_low, ymax=ci_high,
fill=normalised_stimulus),
linetype=2, alpha=0.1,
size=.8)                                      +
scale_fill_manual( values=c(PMpallette))                   +
facet_grid(. ~ phase, scales = "free_x",
space = "free_x")              +
theme_bw()                                                +
scale_color_manual("Stimuli",values=PMpallette)                     +
labs(title="PORT elephant plot",
y="Mean expectancy rating\n",
subtitle = "dashed lines = 95% confidence intervals\n")                                   +
theme(plot.subtitle = element_text(face = "italic",
size = 18),
plot.title = element_text(face = "italic",
size = 38),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(face = "bold",
size = axis.text),
strip.text = element_text(face = "bold",
size = strip.text),
legend.position = 'none',
axis.title = element_text(face = "bold",
size = y.title),
panel.spacing.x=unit(0, "lines"))                     +
scale_x_continuous(breaks = round(seq(min(fc_plot$trial_by_stimulus),
max(fc_plot$trial_by_stimulus), by = 1),1))          +
scale_y_continuous(breaks = seq(0,10,by=1))         +
theme(plot.margin = unit(c(0.6, 0.6, 0.6, 0.6), "cm"))
# save figure in folder
png(paste0(path,"/PORT_elephantPlot.png"),width=18,height=10,unit=units,res=res)
ggdraw(elephant)
dev.off()
127.13-4.75-21.49-24.65-2-39.25
34.99+15
21.49+15
266.63/2
/133/2
266.63/3
?read.table
remove(list = ls())
if(!require(reshape2)){
install.packages("reshape2")
library(reshape2)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr")
library(tidyr)
}
## file picker
filename_ratings <- file.choose()
## get the path to the directory where the raw data is stored
raw_path <- dirname(filename_ratings)
## create the folders for each stage (note, this will do nothing if they already exist)
dir.create(file.path(raw_path, "StageZero_datasets"), showWarnings = FALSE)
dir.create(file.path(raw_path, "Figures"), showWarnings = FALSE)
dir.create(file.path(raw_path, "Final_datasets"), showWarnings = FALSE)
## create exclusions directory
dir.create(file.path(raw_path, "Exclusions"), showWarnings = FALSE)
# paths
exclusions_path <- file.path(raw_path, "Exclusions")
output_path <- file.path(raw_path, "StageZero_datasets")
# file names
file_ratings <- "affectiveRatings_stageZero.csv"
file_acquisition <- "acquisition_stageZero.csv"
file_generalisation <- "generalisation_stageZero.csv"
file_extinction <- "extinction_stageZero.csv"
file_return <- "returnFear_stageZero.csv"
file_exclusions <- "dataDrivenExclusions_stageZero.csv"
# users data reference
filename_users <- file.path(raw_path,"users.csv")
ratings <- read.csv(filename_ratings,header = TRUE, sep=',')
names(ratings)
?separate
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr")
library(tidyr)
}
zero_data <- read.csv(filename_zero)
remove(list = ls())
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr")
library(tidyr)
}
## file picker
filename_zero <- file.choose()
25*0.8
24*0.2
48*0.2
36*0.2
8*0.2
4/6
5/6
7/6
6/6
# Install / load packages
if(!require(knitr)){
install.packages("knitr")
library(knitr)
}
if(!require(summarytools)){
install.packages("summarytools")
library(summarytools)
}
if(!require(data.table)){
install.packages("data.table")
library(data.table)
}
if(!require(kableExtra)){
install.packages("kableExtra")
library(kableExtra)
}
if(!require(glue)){
install.packages("glue")
library(glue)
}
if(!require(MplusAutomation)){
install.packages("MplusAutomation")
library(MplusAutomation)
}
if(!require(texreg)){
install.packages("texreg")
library(texreg)
}
if(!require(relimp)){
install.packages("relimp")
library(relimp)
}
if(!require(rhdf5)){
install.packages("rhdf5")
library(rhdf5)
}
# Install / load packages
if(!require(knitr)){
install.packages("knitr")
library(knitr)
}
if(!require(summarytools)){
install.packages("summarytools")
library(summarytools)
}
if(!require(data.table)){
install.packages("data.table")
library(data.table)
}
if(!require(kableExtra)){
install.packages("kableExtra")
library(kableExtra)
}
if(!require(glue)){
install.packages("glue")
library(glue)
}
if(!require(MplusAutomation)){
install.packages("MplusAutomation")
library(MplusAutomation)
}
if(!require(texreg)){
install.packages("texreg")
library(texreg)
}
if(!require(relimp)){
install.packages("relimp")
library(relimp)
}
if(!require(BiocManager)){
install.packages("BiocManager")
library(BiocManager)
}
if(!require(rhdf5)){
BiocManager::install("rhdf5")
library(rhdf5)
}
